-- lua中的面向对象，本文只描述单继承，实际编码中只使用单继承，不要使用多继承。

A = { x = 10, y = 0 }

function A:new(o)
    o = o or {} -- create object if user does not provide one
    setmetatable(o, self)
    self.__index = self
    return o
end

--[[
 其实上述函数的第一个参数是self，表示对象自身，此处lua支持使用冒号操作符省略了第一个参数self，写起来更简洁。
 用点号操作符的写法为：
 function A.new(self, t)
     ...
 end
冒号的效果相当于在函数定义和函数调用的时候，增加一个额外的隐藏参数self。

最有用的语句是： x = x or v，它相当于：if not x then x = v end。

在Lua中，有一种习惯写法：
local foo = foo
这句代码创建了一个局部变量foo，用其来保存全局变量foo的值。如果后续其他函数需要改变全局foo的值，
那么可以在这里先将它的值保存起来。这种方式还可以加速在当前作用域中对全局变量foo的访问。
如果需要访问全局变量foo的话，可以使用_G.foo。
--]]

AA = A:new()
--[[
上述语句从A中产生一个对象AA，使用冒号操作符省略了第一个参数self，也可以使用点号操作符：AA = A.new(A)。
此时，AA就是一个新表了，它是一个对象，但也是一个类。它还可以继续如下操作：
--]]
s = AA:new()
--[[AA中本来是没有new这个方法的，但它被赋予了一个元表（同时也是原型），这个时候是A，A中有new方法和x、y两个字段。
AA通过__index回溯到A找到了new方法，并且执行new的代码，同时还会传入self参数。
这就是奇妙所在，此时传入的self参数引用的是AA这个表，而不再是第一次调用时A这个表了。
因此 AA:new()执行后生成了一个新的对象s，这个对象以AA为原型，继承AA的所有内容。
--]]

-- 如果在A中定义了下面的函数：
function A:acc(v)
    self.x = self.x + v -- 在类的成员函数中访问数据成员需要用‘self.’
end

function A:dec(v)
    if v > self.x then
        error "not more than zero"
    end

    self.x = self.x - v
end

s:acc(5)
--[[
调用过程是这样的，先查找s中有无acc这个方法，没有找到，然后去找AA中有无acc这个方法，还是没找到，
然后就去A中找有无此方法，找到了。找到后，将指向s的self参数5这个参数传进acc函数中，并执行acc的代码，
执行里面代码的时候，这一句：
self.x = self.x + v
在表达式右端，self.x是一个空值，因为self现在指向的是s，因此，根据__index往回回溯，一直找到A中有一个x，
然后引用这个x值（10），因此，上面表达式就变成：
self.x = 10 + 5
右边计算得15，赋值给左边，但这时self.x没有定义，但是s（及s的元表）中也没有定义__newindex元方法，
于是就在self（此时为s）所指向的表里面新建一个x字段，然后将15赋值给这个字段。
经过这个操作之后，实例s中，就有一个字段（成员变量）x了，它的值为15。
下次，如果再调用
s:dec(10)
的话，就会做类似的回溯操作，不过这次只做方法的回溯，而不做成员变量x的回溯，因为此时s中已经有x这个成员变量了，
执行了这个函数后，s.x会等于5。
--]]

--[[
综上，这就是整个类继承，及对象实例方法引用的过程了。
AA作为A的子类，本身是可以有一些作为的，因为AA之下的类及对象在查找时，都会先通过它这一关，
才会到它的父亲A那里去，因此，它这里可以重载A的方法，比如，它可以定义如下函数：
--]]
function AA:acc(v)
    -- ...
end

function AA:dec(v)
    -- ...
end

--[[
这个特性用面向对象的话来说，就是子类可以覆盖父类的方法及成员变量（字段），也就是重载。
AA中还可以定义一些A中没有的方法和字段。
为了适应在模块中使用的情况（很多），在function A:new(o)之外还定义一个生成函数：
--]]
function new(o)
    A:new(o)
end

--[[
将生成函数封装起来，然后，只需使用模块名.new()就可以在模块外面生成一个A的实例对象了。
--]]
