// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSG_COM_MOON_GAME_DDZ_H_
#define FLATBUFFERS_GENERATED_MSG_COM_MOON_GAME_DDZ_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace moon {
namespace game {
namespace ddz {

struct Vec3;

struct Monster;

struct Weapon;

struct Req1;

struct Rsp1;

struct Req2;

struct Rsp2;

struct Msg;

enum MsgId {
  MsgId_MSG_ID_REQ_1 = 1000,
  MsgId_MSG_ID_RSP_1 = 1001,
  MsgId_MSG_ID_REQ_2 = 1002,
  MsgId_MSG_ID_RSP_2 = 1003,
  MsgId_MIN = MsgId_MSG_ID_REQ_1,
  MsgId_MAX = MsgId_MSG_ID_RSP_2
};

inline const MsgId (&EnumValuesMsgId())[4] {
  static const MsgId values[] = {
    MsgId_MSG_ID_REQ_1,
    MsgId_MSG_ID_RSP_1,
    MsgId_MSG_ID_REQ_2,
    MsgId_MSG_ID_RSP_2
  };
  return values;
}

inline const char * const *EnumNamesMsgId() {
  static const char * const names[] = {
    "MSG_ID_REQ_1",
    "MSG_ID_RSP_1",
    "MSG_ID_REQ_2",
    "MSG_ID_RSP_2",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsgId(MsgId e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(MsgId_MSG_ID_REQ_1);
  return EnumNamesMsgId()[index];
}

enum Color {
  Color_Red = 0,
  Color_Green = 1,
  Color_Blue = 2,
  Color_MIN = Color_Red,
  Color_MAX = Color_Blue
};

inline const Color (&EnumValuesColor())[3] {
  static const Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[] = {
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesColor()[index];
}

enum Equipment {
  Equipment_NONE = 0,
  Equipment_Weapon = 1,
  Equipment_MIN = Equipment_NONE,
  Equipment_MAX = Equipment_Weapon
};

inline const Equipment (&EnumValuesEquipment())[2] {
  static const Equipment values[] = {
    Equipment_NONE,
    Equipment_Weapon
  };
  return values;
}

inline const char * const *EnumNamesEquipment() {
  static const char * const names[] = {
    "NONE",
    "Weapon",
    nullptr
  };
  return names;
}

inline const char *EnumNameEquipment(Equipment e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEquipment()[index];
}

template<typename T> struct EquipmentTraits {
  static const Equipment enum_value = Equipment_NONE;
};

template<> struct EquipmentTraits<Weapon> {
  static const Equipment enum_value = Equipment_Weapon;
};

bool VerifyEquipment(flatbuffers::Verifier &verifier, const void *obj, Equipment type);
bool VerifyEquipmentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum MsgBody {
  MsgBody_NONE = 0,
  MsgBody_Req1 = 1,
  MsgBody_Rsp1 = 2,
  MsgBody_Req2 = 3,
  MsgBody_Rsp2 = 4,
  MsgBody_MIN = MsgBody_NONE,
  MsgBody_MAX = MsgBody_Rsp2
};

inline const MsgBody (&EnumValuesMsgBody())[5] {
  static const MsgBody values[] = {
    MsgBody_NONE,
    MsgBody_Req1,
    MsgBody_Rsp1,
    MsgBody_Req2,
    MsgBody_Rsp2
  };
  return values;
}

inline const char * const *EnumNamesMsgBody() {
  static const char * const names[] = {
    "NONE",
    "Req1",
    "Rsp1",
    "Req2",
    "Rsp2",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsgBody(MsgBody e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMsgBody()[index];
}

template<typename T> struct MsgBodyTraits {
  static const MsgBody enum_value = MsgBody_NONE;
};

template<> struct MsgBodyTraits<Req1> {
  static const MsgBody enum_value = MsgBody_Req1;
};

template<> struct MsgBodyTraits<Rsp1> {
  static const MsgBody enum_value = MsgBody_Rsp1;
};

template<> struct MsgBodyTraits<Req2> {
  static const MsgBody enum_value = MsgBody_Req2;
};

template<> struct MsgBodyTraits<Rsp2> {
  static const MsgBody enum_value = MsgBody_Rsp2;
};

bool VerifyMsgBody(flatbuffers::Verifier &verifier, const void *obj, MsgBody type);
bool VerifyMsgBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(float _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(float _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
  void mutate_z(float _z) {
    flatbuffers::WriteScalar(&z_, _z);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8,
    VT_NAME = 10,
    VT_INVENTORY = 14,
    VT_COLOR = 16,
    VT_WEAPONS = 18,
    VT_EQUIPPED_TYPE = 20,
    VT_EQUIPPED = 22
  };
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  Vec3 *mutable_pos() {
    return GetStruct<Vec3 *>(VT_POS);
  }
  int16_t mana() const {
    return GetField<int16_t>(VT_MANA, 150);
  }
  bool mutate_mana(int16_t _mana) {
    return SetField<int16_t>(VT_MANA, _mana, 150);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 100);
  }
  bool mutate_hp(int16_t _hp) {
    return SetField<int16_t>(VT_HP, _hp, 100);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  flatbuffers::Vector<uint8_t> *mutable_inventory() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  Color color() const {
    return static_cast<Color>(GetField<int8_t>(VT_COLOR, 2));
  }
  bool mutate_color(Color _color) {
    return SetField<int8_t>(VT_COLOR, static_cast<int8_t>(_color), 2);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Weapon>> *weapons() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Weapon>> *>(VT_WEAPONS);
  }
  flatbuffers::Vector<flatbuffers::Offset<Weapon>> *mutable_weapons() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Weapon>> *>(VT_WEAPONS);
  }
  Equipment equipped_type() const {
    return static_cast<Equipment>(GetField<uint8_t>(VT_EQUIPPED_TYPE, 0));
  }
  bool mutate_equipped_type(Equipment _equipped_type) {
    return SetField<uint8_t>(VT_EQUIPPED_TYPE, static_cast<uint8_t>(_equipped_type), 0);
  }
  const void *equipped() const {
    return GetPointer<const void *>(VT_EQUIPPED);
  }
  template<typename T> const T *equipped_as() const;
  const Weapon *equipped_as_Weapon() const {
    return equipped_type() == Equipment_Weapon ? static_cast<const Weapon *>(equipped()) : nullptr;
  }
  void *mutable_equipped() {
    return GetPointer<void *>(VT_EQUIPPED);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<int16_t>(verifier, VT_MANA) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.VerifyVector(inventory()) &&
           VerifyField<int8_t>(verifier, VT_COLOR) &&
           VerifyOffset(verifier, VT_WEAPONS) &&
           verifier.VerifyVector(weapons()) &&
           verifier.VerifyVectorOfTables(weapons()) &&
           VerifyField<uint8_t>(verifier, VT_EQUIPPED_TYPE) &&
           VerifyOffset(verifier, VT_EQUIPPED) &&
           VerifyEquipment(verifier, equipped(), equipped_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Weapon *Monster::equipped_as<Weapon>() const {
  return equipped_as_Weapon();
}

struct MonsterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  void add_mana(int16_t mana) {
    fbb_.AddElement<int16_t>(Monster::VT_MANA, mana, 150);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(Monster::VT_HP, hp, 100);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  void add_inventory(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(Monster::VT_INVENTORY, inventory);
  }
  void add_color(Color color) {
    fbb_.AddElement<int8_t>(Monster::VT_COLOR, static_cast<int8_t>(color), 2);
  }
  void add_weapons(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Weapon>>> weapons) {
    fbb_.AddOffset(Monster::VT_WEAPONS, weapons);
  }
  void add_equipped_type(Equipment equipped_type) {
    fbb_.AddElement<uint8_t>(Monster::VT_EQUIPPED_TYPE, static_cast<uint8_t>(equipped_type), 0);
  }
  void add_equipped(flatbuffers::Offset<void> equipped) {
    fbb_.AddOffset(Monster::VT_EQUIPPED, equipped);
  }
  explicit MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MonsterBuilder &operator=(const MonsterBuilder &);
  flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monster> CreateMonster(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    int16_t mana = 150,
    int16_t hp = 100,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory = 0,
    Color color = Color_Blue,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Weapon>>> weapons = 0,
    Equipment equipped_type = Equipment_NONE,
    flatbuffers::Offset<void> equipped = 0) {
  MonsterBuilder builder_(_fbb);
  builder_.add_equipped(equipped);
  builder_.add_weapons(weapons);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_equipped_type(equipped_type);
  builder_.add_color(color);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monster> CreateMonsterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    int16_t mana = 150,
    int16_t hp = 100,
    const char *name = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    Color color = Color_Blue,
    const std::vector<flatbuffers::Offset<Weapon>> *weapons = nullptr,
    Equipment equipped_type = Equipment_NONE,
    flatbuffers::Offset<void> equipped = 0) {
  return com::moon::game::ddz::CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      name ? _fbb.CreateString(name) : 0,
      inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0,
      color,
      weapons ? _fbb.CreateVector<flatbuffers::Offset<Weapon>>(*weapons) : 0,
      equipped_type,
      equipped);
}

struct Weapon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_DAMAGE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool mutate_damage(int16_t _damage) {
    return SetField<int16_t>(VT_DAMAGE, _damage, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE) &&
           verifier.EndTable();
  }
};

struct WeaponBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Weapon::VT_NAME, name);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(Weapon::VT_DAMAGE, damage, 0);
  }
  explicit WeaponBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WeaponBuilder &operator=(const WeaponBuilder &);
  flatbuffers::Offset<Weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Weapon>(end);
    return o;
  }
};

inline flatbuffers::Offset<Weapon> CreateWeapon(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t damage = 0) {
  WeaponBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_damage(damage);
  return builder_.Finish();
}

inline flatbuffers::Offset<Weapon> CreateWeaponDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t damage = 0) {
  return com::moon::game::ddz::CreateWeapon(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      damage);
}

struct Req1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_A = 4,
    VT_B = 6,
    VT_C = 8,
    VT_D = 10,
    VT_MONSTER = 12
  };
  int32_t a() const {
    return GetField<int32_t>(VT_A, 0);
  }
  bool mutate_a(int32_t _a) {
    return SetField<int32_t>(VT_A, _a, 0);
  }
  int32_t b() const {
    return GetField<int32_t>(VT_B, 0);
  }
  bool mutate_b(int32_t _b) {
    return SetField<int32_t>(VT_B, _b, 0);
  }
  const flatbuffers::String *c() const {
    return GetPointer<const flatbuffers::String *>(VT_C);
  }
  flatbuffers::String *mutable_c() {
    return GetPointer<flatbuffers::String *>(VT_C);
  }
  const flatbuffers::Vector<int32_t> *d() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_D);
  }
  flatbuffers::Vector<int32_t> *mutable_d() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_D);
  }
  const Monster *monster() const {
    return GetPointer<const Monster *>(VT_MONSTER);
  }
  Monster *mutable_monster() {
    return GetPointer<Monster *>(VT_MONSTER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_A) &&
           VerifyField<int32_t>(verifier, VT_B) &&
           VerifyOffset(verifier, VT_C) &&
           verifier.VerifyString(c()) &&
           VerifyOffset(verifier, VT_D) &&
           verifier.VerifyVector(d()) &&
           VerifyOffset(verifier, VT_MONSTER) &&
           verifier.VerifyTable(monster()) &&
           verifier.EndTable();
  }
};

struct Req1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(int32_t a) {
    fbb_.AddElement<int32_t>(Req1::VT_A, a, 0);
  }
  void add_b(int32_t b) {
    fbb_.AddElement<int32_t>(Req1::VT_B, b, 0);
  }
  void add_c(flatbuffers::Offset<flatbuffers::String> c) {
    fbb_.AddOffset(Req1::VT_C, c);
  }
  void add_d(flatbuffers::Offset<flatbuffers::Vector<int32_t>> d) {
    fbb_.AddOffset(Req1::VT_D, d);
  }
  void add_monster(flatbuffers::Offset<Monster> monster) {
    fbb_.AddOffset(Req1::VT_MONSTER, monster);
  }
  explicit Req1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Req1Builder &operator=(const Req1Builder &);
  flatbuffers::Offset<Req1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Req1>(end);
    return o;
  }
};

inline flatbuffers::Offset<Req1> CreateReq1(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t a = 0,
    int32_t b = 0,
    flatbuffers::Offset<flatbuffers::String> c = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> d = 0,
    flatbuffers::Offset<Monster> monster = 0) {
  Req1Builder builder_(_fbb);
  builder_.add_monster(monster);
  builder_.add_d(d);
  builder_.add_c(c);
  builder_.add_b(b);
  builder_.add_a(a);
  return builder_.Finish();
}

inline flatbuffers::Offset<Req1> CreateReq1Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t a = 0,
    int32_t b = 0,
    const char *c = nullptr,
    const std::vector<int32_t> *d = nullptr,
    flatbuffers::Offset<Monster> monster = 0) {
  return com::moon::game::ddz::CreateReq1(
      _fbb,
      a,
      b,
      c ? _fbb.CreateString(c) : 0,
      d ? _fbb.CreateVector<int32_t>(*d) : 0,
      monster);
}

struct Rsp1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERR_CODE = 4
  };
  int32_t err_code() const {
    return GetField<int32_t>(VT_ERR_CODE, 0);
  }
  bool mutate_err_code(int32_t _err_code) {
    return SetField<int32_t>(VT_ERR_CODE, _err_code, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERR_CODE) &&
           verifier.EndTable();
  }
};

struct Rsp1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_err_code(int32_t err_code) {
    fbb_.AddElement<int32_t>(Rsp1::VT_ERR_CODE, err_code, 0);
  }
  explicit Rsp1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Rsp1Builder &operator=(const Rsp1Builder &);
  flatbuffers::Offset<Rsp1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Rsp1>(end);
    return o;
  }
};

inline flatbuffers::Offset<Rsp1> CreateRsp1(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t err_code = 0) {
  Rsp1Builder builder_(_fbb);
  builder_.add_err_code(err_code);
  return builder_.Finish();
}

struct Req2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_A = 4,
    VT_B = 6
  };
  int8_t a() const {
    return GetField<int8_t>(VT_A, 0);
  }
  bool mutate_a(int8_t _a) {
    return SetField<int8_t>(VT_A, _a, 0);
  }
  int16_t b() const {
    return GetField<int16_t>(VT_B, 0);
  }
  bool mutate_b(int16_t _b) {
    return SetField<int16_t>(VT_B, _b, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_A) &&
           VerifyField<int16_t>(verifier, VT_B) &&
           verifier.EndTable();
  }
};

struct Req2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(int8_t a) {
    fbb_.AddElement<int8_t>(Req2::VT_A, a, 0);
  }
  void add_b(int16_t b) {
    fbb_.AddElement<int16_t>(Req2::VT_B, b, 0);
  }
  explicit Req2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Req2Builder &operator=(const Req2Builder &);
  flatbuffers::Offset<Req2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Req2>(end);
    return o;
  }
};

inline flatbuffers::Offset<Req2> CreateReq2(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t a = 0,
    int16_t b = 0) {
  Req2Builder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  return builder_.Finish();
}

struct Rsp2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERR_CODE = 4
  };
  int32_t err_code() const {
    return GetField<int32_t>(VT_ERR_CODE, 0);
  }
  bool mutate_err_code(int32_t _err_code) {
    return SetField<int32_t>(VT_ERR_CODE, _err_code, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERR_CODE) &&
           verifier.EndTable();
  }
};

struct Rsp2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_err_code(int32_t err_code) {
    fbb_.AddElement<int32_t>(Rsp2::VT_ERR_CODE, err_code, 0);
  }
  explicit Rsp2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Rsp2Builder &operator=(const Rsp2Builder &);
  flatbuffers::Offset<Rsp2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Rsp2>(end);
    return o;
  }
};

inline flatbuffers::Offset<Rsp2> CreateRsp2(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t err_code = 0) {
  Rsp2Builder builder_(_fbb);
  builder_.add_err_code(err_code);
  return builder_.Finish();
}

struct Msg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSG_BODY_TYPE = 4,
    VT_MSG_BODY = 6
  };
  MsgBody msg_body_type() const {
    return static_cast<MsgBody>(GetField<uint8_t>(VT_MSG_BODY_TYPE, 0));
  }
  bool mutate_msg_body_type(MsgBody _msg_body_type) {
    return SetField<uint8_t>(VT_MSG_BODY_TYPE, static_cast<uint8_t>(_msg_body_type), 0);
  }
  const void *msg_body() const {
    return GetPointer<const void *>(VT_MSG_BODY);
  }
  template<typename T> const T *msg_body_as() const;
  const Req1 *msg_body_as_Req1() const {
    return msg_body_type() == MsgBody_Req1 ? static_cast<const Req1 *>(msg_body()) : nullptr;
  }
  const Rsp1 *msg_body_as_Rsp1() const {
    return msg_body_type() == MsgBody_Rsp1 ? static_cast<const Rsp1 *>(msg_body()) : nullptr;
  }
  const Req2 *msg_body_as_Req2() const {
    return msg_body_type() == MsgBody_Req2 ? static_cast<const Req2 *>(msg_body()) : nullptr;
  }
  const Rsp2 *msg_body_as_Rsp2() const {
    return msg_body_type() == MsgBody_Rsp2 ? static_cast<const Rsp2 *>(msg_body()) : nullptr;
  }
  void *mutable_msg_body() {
    return GetPointer<void *>(VT_MSG_BODY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MSG_BODY_TYPE) &&
           VerifyOffset(verifier, VT_MSG_BODY) &&
           VerifyMsgBody(verifier, msg_body(), msg_body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Req1 *Msg::msg_body_as<Req1>() const {
  return msg_body_as_Req1();
}

template<> inline const Rsp1 *Msg::msg_body_as<Rsp1>() const {
  return msg_body_as_Rsp1();
}

template<> inline const Req2 *Msg::msg_body_as<Req2>() const {
  return msg_body_as_Req2();
}

template<> inline const Rsp2 *Msg::msg_body_as<Rsp2>() const {
  return msg_body_as_Rsp2();
}

struct MsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_body_type(MsgBody msg_body_type) {
    fbb_.AddElement<uint8_t>(Msg::VT_MSG_BODY_TYPE, static_cast<uint8_t>(msg_body_type), 0);
  }
  void add_msg_body(flatbuffers::Offset<void> msg_body) {
    fbb_.AddOffset(Msg::VT_MSG_BODY, msg_body);
  }
  explicit MsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MsgBuilder &operator=(const MsgBuilder &);
  flatbuffers::Offset<Msg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Msg>(end);
    return o;
  }
};

inline flatbuffers::Offset<Msg> CreateMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    MsgBody msg_body_type = MsgBody_NONE,
    flatbuffers::Offset<void> msg_body = 0) {
  MsgBuilder builder_(_fbb);
  builder_.add_msg_body(msg_body);
  builder_.add_msg_body_type(msg_body_type);
  return builder_.Finish();
}

inline bool VerifyEquipment(flatbuffers::Verifier &verifier, const void *obj, Equipment type) {
  switch (type) {
    case Equipment_NONE: {
      return true;
    }
    case Equipment_Weapon: {
      auto ptr = reinterpret_cast<const Weapon *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyEquipmentVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEquipment(
        verifier,  values->Get(i), types->GetEnum<Equipment>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyMsgBody(flatbuffers::Verifier &verifier, const void *obj, MsgBody type) {
  switch (type) {
    case MsgBody_NONE: {
      return true;
    }
    case MsgBody_Req1: {
      auto ptr = reinterpret_cast<const Req1 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MsgBody_Rsp1: {
      auto ptr = reinterpret_cast<const Rsp1 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MsgBody_Req2: {
      auto ptr = reinterpret_cast<const Req2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MsgBody_Rsp2: {
      auto ptr = reinterpret_cast<const Rsp2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyMsgBodyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMsgBody(
        verifier,  values->Get(i), types->GetEnum<MsgBody>(i))) {
      return false;
    }
  }
  return true;
}

inline const com::moon::game::ddz::Msg *GetMsg(const void *buf) {
  return flatbuffers::GetRoot<com::moon::game::ddz::Msg>(buf);
}

inline const com::moon::game::ddz::Msg *GetSizePrefixedMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<com::moon::game::ddz::Msg>(buf);
}

inline Msg *GetMutableMsg(void *buf) {
  return flatbuffers::GetMutableRoot<Msg>(buf);
}

inline bool VerifyMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::moon::game::ddz::Msg>(nullptr);
}

inline bool VerifySizePrefixedMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<com::moon::game::ddz::Msg>(nullptr);
}

inline void FinishMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::moon::game::ddz::Msg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::moon::game::ddz::Msg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ddz
}  // namespace game
}  // namespace moon
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_MSG_COM_MOON_GAME_DDZ_H_
