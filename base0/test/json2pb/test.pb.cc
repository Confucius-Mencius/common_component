// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace test {
class EchoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EchoRequest>
     _instance;
} _EchoRequest_default_instance_;
class ComplexMessage_SubMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ComplexMessage_SubMessage>
     _instance;
} _ComplexMessage_SubMessage_default_instance_;
class ComplexMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ComplexMessage>
     _instance;
} _ComplexMessage_default_instance_;

namespace protobuf_test_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage_SubMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage_SubMessage, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage_SubMessage, echo_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, sub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, _enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexMessage, str_list_),
  0,
  3,
  ~0u,
  1,
  4,
  2,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(EchoRequest)},
  { 7, 14, sizeof(ComplexMessage_SubMessage)},
  { 16, 29, sizeof(ComplexMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EchoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComplexMessage_SubMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComplexMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EchoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EchoRequest_default_instance_);_ComplexMessage_SubMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ComplexMessage_SubMessage_default_instance_);_ComplexMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ComplexMessage_default_instance_);::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::test::ComplexMessage::internal_default_instance(),
    101, 8, false, false);
  _ComplexMessage_default_instance_._instance.get_mutable()->sub_ = const_cast< ::test::ComplexMessage_SubMessage*>(
      ::test::ComplexMessage_SubMessage::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntest.proto\022\004test\"\033\n\013EchoRequest\022\014\n\004tex"
      "t\030\001 \002(\t\"\256\002\n\016ComplexMessage\022\014\n\004_str\030\001 \002(\t"
      "\022\016\n\006_float\030\002 \001(\002\022\014\n\004_int\030\003 \003(\022\022\014\n\004_bin\030\004"
      " \002(\014\022\r\n\005_bool\030\005 \002(\010\022,\n\003sub\030\n \001(\0132\037.test."
      "ComplexMessage.SubMessage\022+\n\005_enum\030\013 \003(\016"
      "2\034.test.ComplexMessage.SubEnum\022\020\n\010str_li"
      "st\030\014 \003(\t\032<\n\nSubMessage\022\r\n\005field\030\001 \002(\t\022\037\n"
      "\004echo\030\002 \003(\0132\021.test.EchoRequest\"!\n\007SubEnu"
      "m\022\n\n\006VALUE1\020\n\022\n\n\006VALUE2\020\024*\005\010d\020\310\001:$\n\006e_bo"
      "ol\022\024.test.ComplexMessage\030e \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_2eproto

const ::google::protobuf::EnumDescriptor* ComplexMessage_SubEnum_descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_enum_descriptors[0];
}
bool ComplexMessage_SubEnum_IsValid(int value) {
  switch (value) {
    case 10:
    case 20:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComplexMessage_SubEnum ComplexMessage::VALUE1;
const ComplexMessage_SubEnum ComplexMessage::VALUE2;
const ComplexMessage_SubEnum ComplexMessage::SubEnum_MIN;
const ComplexMessage_SubEnum ComplexMessage::SubEnum_MAX;
const int ComplexMessage::SubEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoRequest::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoRequest::EchoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:test.EchoRequest)
}

void EchoRequest::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:test.EchoRequest)
  SharedDtor();
}

void EchoRequest::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoRequest::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoRequest& EchoRequest::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

EchoRequest* EchoRequest::New(::google::protobuf::Arena* arena) const {
  EchoRequest* n = new EchoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:test.EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EchoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.EchoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test.EchoRequest.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.EchoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.EchoRequest)
  return false;
#undef DO_
}

void EchoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.EchoRequest.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.EchoRequest)
}

::google::protobuf::uint8* EchoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.EchoRequest.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.EchoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.EchoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.EchoRequest)
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void EchoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EchoRequest::Swap(EchoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EchoRequest::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EchoRequest

// required string text = 1;
bool EchoRequest::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EchoRequest::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void EchoRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void EchoRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& EchoRequest::text() const {
  // @@protoc_insertion_point(field_get:test.EchoRequest.text)
  return text_.GetNoArena();
}
void EchoRequest::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.EchoRequest.text)
}
#if LANG_CXX11
void EchoRequest::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.EchoRequest.text)
}
#endif
void EchoRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.EchoRequest.text)
}
void EchoRequest::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.EchoRequest.text)
}
::std::string* EchoRequest::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:test.EchoRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EchoRequest::release_text() {
  // @@protoc_insertion_point(field_release:test.EchoRequest.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EchoRequest::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:test.EchoRequest.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexMessage_SubMessage::kFieldFieldNumber;
const int ComplexMessage_SubMessage::kEchoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexMessage_SubMessage::ComplexMessage_SubMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.ComplexMessage.SubMessage)
}
ComplexMessage_SubMessage::ComplexMessage_SubMessage(const ComplexMessage_SubMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      echo_(from.echo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field()) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:test.ComplexMessage.SubMessage)
}

void ComplexMessage_SubMessage::SharedCtor() {
  _cached_size_ = 0;
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ComplexMessage_SubMessage::~ComplexMessage_SubMessage() {
  // @@protoc_insertion_point(destructor:test.ComplexMessage.SubMessage)
  SharedDtor();
}

void ComplexMessage_SubMessage::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ComplexMessage_SubMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexMessage_SubMessage::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComplexMessage_SubMessage& ComplexMessage_SubMessage::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComplexMessage_SubMessage* ComplexMessage_SubMessage::New(::google::protobuf::Arena* arena) const {
  ComplexMessage_SubMessage* n = new ComplexMessage_SubMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexMessage_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ComplexMessage.SubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  echo_.Clear();
  if (has_field()) {
    GOOGLE_DCHECK(!field_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*field_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ComplexMessage_SubMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.ComplexMessage.SubMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test.ComplexMessage.SubMessage.field");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .test.EchoRequest echo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.ComplexMessage.SubMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.ComplexMessage.SubMessage)
  return false;
#undef DO_
}

void ComplexMessage_SubMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.ComplexMessage.SubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.ComplexMessage.SubMessage.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field(), output);
  }

  // repeated .test.EchoRequest echo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->echo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->echo(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.ComplexMessage.SubMessage)
}

::google::protobuf::uint8* ComplexMessage_SubMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.ComplexMessage.SubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.ComplexMessage.SubMessage.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // repeated .test.EchoRequest echo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->echo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->echo(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ComplexMessage.SubMessage)
  return target;
}

size_t ComplexMessage_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.ComplexMessage.SubMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }
  // repeated .test.EchoRequest echo = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->echo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->echo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexMessage_SubMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ComplexMessage.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexMessage_SubMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexMessage_SubMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ComplexMessage.SubMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ComplexMessage.SubMessage)
    MergeFrom(*source);
  }
}

void ComplexMessage_SubMessage::MergeFrom(const ComplexMessage_SubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ComplexMessage.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  echo_.MergeFrom(from.echo_);
  if (from.has_field()) {
    set_has_field();
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void ComplexMessage_SubMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ComplexMessage.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexMessage_SubMessage::CopyFrom(const ComplexMessage_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ComplexMessage.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage_SubMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->echo())) return false;
  return true;
}

void ComplexMessage_SubMessage::Swap(ComplexMessage_SubMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexMessage_SubMessage::InternalSwap(ComplexMessage_SubMessage* other) {
  using std::swap;
  echo_.InternalSwap(&other->echo_);
  field_.Swap(&other->field_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexMessage_SubMessage::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexMessage_SubMessage

// required string field = 1;
bool ComplexMessage_SubMessage::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ComplexMessage_SubMessage::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
void ComplexMessage_SubMessage::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void ComplexMessage_SubMessage::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field();
}
const ::std::string& ComplexMessage_SubMessage::field() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.SubMessage.field)
  return field_.GetNoArena();
}
void ComplexMessage_SubMessage::set_field(const ::std::string& value) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage.SubMessage.field)
}
#if LANG_CXX11
void ComplexMessage_SubMessage::set_field(::std::string&& value) {
  set_has_field();
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.ComplexMessage.SubMessage.field)
}
#endif
void ComplexMessage_SubMessage::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.ComplexMessage.SubMessage.field)
}
void ComplexMessage_SubMessage::set_field(const char* value, size_t size) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.ComplexMessage.SubMessage.field)
}
::std::string* ComplexMessage_SubMessage::mutable_field() {
  set_has_field();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.SubMessage.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ComplexMessage_SubMessage::release_field() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage.SubMessage.field)
  clear_has_field();
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComplexMessage_SubMessage::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    set_has_field();
  } else {
    clear_has_field();
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage.SubMessage.field)
}

// repeated .test.EchoRequest echo = 2;
int ComplexMessage_SubMessage::echo_size() const {
  return echo_.size();
}
void ComplexMessage_SubMessage::clear_echo() {
  echo_.Clear();
}
const ::test::EchoRequest& ComplexMessage_SubMessage::echo(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.SubMessage.echo)
  return echo_.Get(index);
}
::test::EchoRequest* ComplexMessage_SubMessage::mutable_echo(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.SubMessage.echo)
  return echo_.Mutable(index);
}
::test::EchoRequest* ComplexMessage_SubMessage::add_echo() {
  // @@protoc_insertion_point(field_add:test.ComplexMessage.SubMessage.echo)
  return echo_.Add();
}
::google::protobuf::RepeatedPtrField< ::test::EchoRequest >*
ComplexMessage_SubMessage::mutable_echo() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage.SubMessage.echo)
  return &echo_;
}
const ::google::protobuf::RepeatedPtrField< ::test::EchoRequest >&
ComplexMessage_SubMessage::echo() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage.SubMessage.echo)
  return echo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexMessage::kStrFieldNumber;
const int ComplexMessage::kFloatFieldNumber;
const int ComplexMessage::kIntFieldNumber;
const int ComplexMessage::kBinFieldNumber;
const int ComplexMessage::kBoolFieldNumber;
const int ComplexMessage::kSubFieldNumber;
const int ComplexMessage::kEnumFieldNumber;
const int ComplexMessage::kStrListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexMessage::ComplexMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.ComplexMessage)
}
ComplexMessage::ComplexMessage(const ComplexMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      _int_(from._int_),
      _enum_(from._enum_),
      str_list_(from.str_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  _str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__str()) {
    _str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._str_);
  }
  _bin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has__bin()) {
    _bin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._bin_);
  }
  if (from.has_sub()) {
    sub_ = new ::test::ComplexMessage_SubMessage(*from.sub_);
  } else {
    sub_ = NULL;
  }
  ::memcpy(&_float_, &from._float_,
    static_cast<size_t>(reinterpret_cast<char*>(&_bool_) -
    reinterpret_cast<char*>(&_float_)) + sizeof(_bool_));
  // @@protoc_insertion_point(copy_constructor:test.ComplexMessage)
}

void ComplexMessage::SharedCtor() {
  _cached_size_ = 0;
  _str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _bin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sub_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_bool_) -
      reinterpret_cast<char*>(&sub_)) + sizeof(_bool_));
}

ComplexMessage::~ComplexMessage() {
  // @@protoc_insertion_point(destructor:test.ComplexMessage)
  SharedDtor();
}

void ComplexMessage::SharedDtor() {
  _str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _bin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sub_;
}

void ComplexMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexMessage::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComplexMessage& ComplexMessage::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComplexMessage* ComplexMessage::New(::google::protobuf::Arena* arena) const {
  ComplexMessage* n = new ComplexMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:test.ComplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _int_.Clear();
  _enum_.Clear();
  str_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_str_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!_bin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*_bin_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sub_ != NULL);
      sub_->::test::ComplexMessage_SubMessage::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&_float_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_bool_) -
        reinterpret_cast<char*>(&_float_)) + sizeof(_bool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ComplexMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.ComplexMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string _str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable__str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->_str().data(), static_cast<int>(this->_str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test.ComplexMessage._str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float _float = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has__float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 _int = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 24u, input, this->mutable__int())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable__int())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes _bin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable__bin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool _bool = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has__bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .test.ComplexMessage.SubMessage sub = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .test.ComplexMessage.SubEnum _enum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::test::ComplexMessage_SubEnum_IsValid(value)) {
            add__enum(static_cast< ::test::ComplexMessage_SubEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 11,
                 ::test::ComplexMessage_SubEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable__enum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string str_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_list(this->str_list_size() - 1).data(),
            static_cast<int>(this->str_list(this->str_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test.ComplexMessage.str_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.ComplexMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.ComplexMessage)
  return false;
#undef DO_
}

void ComplexMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.ComplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string _str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_str().data(), static_cast<int>(this->_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.ComplexMessage._str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->_str(), output);
  }

  // optional float _float = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->_float(), output);
  }

  // repeated sint64 _int = 3;
  for (int i = 0, n = this->_int_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      3, this->_int(i), output);
  }

  // required bytes _bin = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->_bin(), output);
  }

  // required bool _bool = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->_bool(), output);
  }

  // optional .test.ComplexMessage.SubMessage sub = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->sub_, output);
  }

  // repeated .test.ComplexMessage.SubEnum _enum = 11;
  for (int i = 0, n = this->_enum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->_enum(i), output);
  }

  // repeated string str_list = 12;
  for (int i = 0, n = this->str_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_list(i).data(), static_cast<int>(this->str_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.ComplexMessage.str_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->str_list(i), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.ComplexMessage)
}

::google::protobuf::uint8* ComplexMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:test.ComplexMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string _str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_str().data(), static_cast<int>(this->_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.ComplexMessage._str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->_str(), target);
  }

  // optional float _float = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->_float(), target);
  }

  // repeated sint64 _int = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(3, this->_int_, target);

  // required bytes _bin = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->_bin(), target);
  }

  // required bool _bool = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->_bool(), target);
  }

  // optional .test.ComplexMessage.SubMessage sub = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->sub_, deterministic, target);
  }

  // repeated .test.ComplexMessage.SubEnum _enum = 11;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    11, this->_enum_, target);

  // repeated string str_list = 12;
  for (int i = 0, n = this->str_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_list(i).data(), static_cast<int>(this->str_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test.ComplexMessage.str_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->str_list(i), target);
  }

  // Extension range [100, 200)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 200, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.ComplexMessage)
  return target;
}

size_t ComplexMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:test.ComplexMessage)
  size_t total_size = 0;

  if (has__str()) {
    // required string _str = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->_str());
  }

  if (has__bin()) {
    // required bytes _bin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->_bin());
  }

  if (has__bool()) {
    // required bool _bool = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ComplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.ComplexMessage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string _str = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->_str());

    // required bytes _bin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->_bin());

    // required bool _bool = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated sint64 _int = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->_int_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->_int_size());
    total_size += data_size;
  }

  // repeated .test.ComplexMessage.SubEnum _enum = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->_enum(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string str_list = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->str_list_size());
  for (int i = 0, n = this->str_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_list(i));
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional .test.ComplexMessage.SubMessage sub = 10;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sub_);
    }

    // optional float _float = 2;
    if (has__float()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.ComplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.ComplexMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.ComplexMessage)
    MergeFrom(*source);
  }
}

void ComplexMessage::MergeFrom(const ComplexMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.ComplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _int_.MergeFrom(from._int_);
  _enum_.MergeFrom(from._enum_);
  str_list_.MergeFrom(from.str_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has__str();
      _str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._str_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has__bin();
      _bin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from._bin_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sub()->::test::ComplexMessage_SubMessage::MergeFrom(from.sub());
    }
    if (cached_has_bits & 0x00000008u) {
      _float_ = from._float_;
    }
    if (cached_has_bits & 0x00000010u) {
      _bool_ = from._bool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ComplexMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.ComplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexMessage::CopyFrom(const ComplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.ComplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexMessage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_sub()) {
    if (!this->sub_->IsInitialized()) return false;
  }
  return true;
}

void ComplexMessage::Swap(ComplexMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexMessage::InternalSwap(ComplexMessage* other) {
  using std::swap;
  _int_.InternalSwap(&other->_int_);
  _enum_.InternalSwap(&other->_enum_);
  str_list_.InternalSwap(&other->str_list_);
  _str_.Swap(&other->_str_);
  _bin_.Swap(&other->_bin_);
  swap(sub_, other->sub_);
  swap(_float_, other->_float_);
  swap(_bool_, other->_bool_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata ComplexMessage::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexMessage

// required string _str = 1;
bool ComplexMessage::has__str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ComplexMessage::set_has__str() {
  _has_bits_[0] |= 0x00000001u;
}
void ComplexMessage::clear_has__str() {
  _has_bits_[0] &= ~0x00000001u;
}
void ComplexMessage::clear__str() {
  _str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__str();
}
const ::std::string& ComplexMessage::_str() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._str)
  return _str_.GetNoArena();
}
void ComplexMessage::set__str(const ::std::string& value) {
  set_has__str();
  _str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._str)
}
#if LANG_CXX11
void ComplexMessage::set__str(::std::string&& value) {
  set_has__str();
  _str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.ComplexMessage._str)
}
#endif
void ComplexMessage::set__str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__str();
  _str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.ComplexMessage._str)
}
void ComplexMessage::set__str(const char* value, size_t size) {
  set_has__str();
  _str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.ComplexMessage._str)
}
::std::string* ComplexMessage::mutable__str() {
  set_has__str();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage._str)
  return _str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ComplexMessage::release__str() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage._str)
  clear_has__str();
  return _str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComplexMessage::set_allocated__str(::std::string* _str) {
  if (_str != NULL) {
    set_has__str();
  } else {
    clear_has__str();
  }
  _str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _str);
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage._str)
}

// optional float _float = 2;
bool ComplexMessage::has__float() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ComplexMessage::set_has__float() {
  _has_bits_[0] |= 0x00000008u;
}
void ComplexMessage::clear_has__float() {
  _has_bits_[0] &= ~0x00000008u;
}
void ComplexMessage::clear__float() {
  _float_ = 0;
  clear_has__float();
}
float ComplexMessage::_float() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._float)
  return _float_;
}
void ComplexMessage::set__float(float value) {
  set_has__float();
  _float_ = value;
  // @@protoc_insertion_point(field_set:test.ComplexMessage._float)
}

// repeated sint64 _int = 3;
int ComplexMessage::_int_size() const {
  return _int_.size();
}
void ComplexMessage::clear__int() {
  _int_.Clear();
}
::google::protobuf::int64 ComplexMessage::_int(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._int)
  return _int_.Get(index);
}
void ComplexMessage::set__int(int index, ::google::protobuf::int64 value) {
  _int_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._int)
}
void ComplexMessage::add__int(::google::protobuf::int64 value) {
  _int_.Add(value);
  // @@protoc_insertion_point(field_add:test.ComplexMessage._int)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ComplexMessage::_int() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage._int)
  return _int_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ComplexMessage::mutable__int() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage._int)
  return &_int_;
}

// required bytes _bin = 4;
bool ComplexMessage::has__bin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ComplexMessage::set_has__bin() {
  _has_bits_[0] |= 0x00000002u;
}
void ComplexMessage::clear_has__bin() {
  _has_bits_[0] &= ~0x00000002u;
}
void ComplexMessage::clear__bin() {
  _bin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__bin();
}
const ::std::string& ComplexMessage::_bin() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._bin)
  return _bin_.GetNoArena();
}
void ComplexMessage::set__bin(const ::std::string& value) {
  set_has__bin();
  _bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._bin)
}
#if LANG_CXX11
void ComplexMessage::set__bin(::std::string&& value) {
  set_has__bin();
  _bin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.ComplexMessage._bin)
}
#endif
void ComplexMessage::set__bin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__bin();
  _bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.ComplexMessage._bin)
}
void ComplexMessage::set__bin(const void* value, size_t size) {
  set_has__bin();
  _bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.ComplexMessage._bin)
}
::std::string* ComplexMessage::mutable__bin() {
  set_has__bin();
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage._bin)
  return _bin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ComplexMessage::release__bin() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage._bin)
  clear_has__bin();
  return _bin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ComplexMessage::set_allocated__bin(::std::string* _bin) {
  if (_bin != NULL) {
    set_has__bin();
  } else {
    clear_has__bin();
  }
  _bin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _bin);
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage._bin)
}

// required bool _bool = 5;
bool ComplexMessage::has__bool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ComplexMessage::set_has__bool() {
  _has_bits_[0] |= 0x00000010u;
}
void ComplexMessage::clear_has__bool() {
  _has_bits_[0] &= ~0x00000010u;
}
void ComplexMessage::clear__bool() {
  _bool_ = false;
  clear_has__bool();
}
bool ComplexMessage::_bool() const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._bool)
  return _bool_;
}
void ComplexMessage::set__bool(bool value) {
  set_has__bool();
  _bool_ = value;
  // @@protoc_insertion_point(field_set:test.ComplexMessage._bool)
}

// optional .test.ComplexMessage.SubMessage sub = 10;
bool ComplexMessage::has_sub() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ComplexMessage::set_has_sub() {
  _has_bits_[0] |= 0x00000004u;
}
void ComplexMessage::clear_has_sub() {
  _has_bits_[0] &= ~0x00000004u;
}
void ComplexMessage::clear_sub() {
  if (sub_ != NULL) sub_->::test::ComplexMessage_SubMessage::Clear();
  clear_has_sub();
}
const ::test::ComplexMessage_SubMessage& ComplexMessage::sub() const {
  const ::test::ComplexMessage_SubMessage* p = sub_;
  // @@protoc_insertion_point(field_get:test.ComplexMessage.sub)
  return p != NULL ? *p : *reinterpret_cast<const ::test::ComplexMessage_SubMessage*>(
      &::test::_ComplexMessage_SubMessage_default_instance_);
}
::test::ComplexMessage_SubMessage* ComplexMessage::mutable_sub() {
  set_has_sub();
  if (sub_ == NULL) {
    sub_ = new ::test::ComplexMessage_SubMessage;
  }
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.sub)
  return sub_;
}
::test::ComplexMessage_SubMessage* ComplexMessage::release_sub() {
  // @@protoc_insertion_point(field_release:test.ComplexMessage.sub)
  clear_has_sub();
  ::test::ComplexMessage_SubMessage* temp = sub_;
  sub_ = NULL;
  return temp;
}
void ComplexMessage::set_allocated_sub(::test::ComplexMessage_SubMessage* sub) {
  delete sub_;
  sub_ = sub;
  if (sub) {
    set_has_sub();
  } else {
    clear_has_sub();
  }
  // @@protoc_insertion_point(field_set_allocated:test.ComplexMessage.sub)
}

// repeated .test.ComplexMessage.SubEnum _enum = 11;
int ComplexMessage::_enum_size() const {
  return _enum_.size();
}
void ComplexMessage::clear__enum() {
  _enum_.Clear();
}
::test::ComplexMessage_SubEnum ComplexMessage::_enum(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage._enum)
  return static_cast< ::test::ComplexMessage_SubEnum >(_enum_.Get(index));
}
void ComplexMessage::set__enum(int index, ::test::ComplexMessage_SubEnum value) {
  assert(::test::ComplexMessage_SubEnum_IsValid(value));
  _enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.ComplexMessage._enum)
}
void ComplexMessage::add__enum(::test::ComplexMessage_SubEnum value) {
  assert(::test::ComplexMessage_SubEnum_IsValid(value));
  _enum_.Add(value);
  // @@protoc_insertion_point(field_add:test.ComplexMessage._enum)
}
const ::google::protobuf::RepeatedField<int>&
ComplexMessage::_enum() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage._enum)
  return _enum_;
}
::google::protobuf::RepeatedField<int>*
ComplexMessage::mutable__enum() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage._enum)
  return &_enum_;
}

// repeated string str_list = 12;
int ComplexMessage::str_list_size() const {
  return str_list_.size();
}
void ComplexMessage::clear_str_list() {
  str_list_.Clear();
}
const ::std::string& ComplexMessage::str_list(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexMessage.str_list)
  return str_list_.Get(index);
}
::std::string* ComplexMessage::mutable_str_list(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexMessage.str_list)
  return str_list_.Mutable(index);
}
void ComplexMessage::set_str_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:test.ComplexMessage.str_list)
  str_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ComplexMessage::set_str_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:test.ComplexMessage.str_list)
  str_list_.Mutable(index)->assign(std::move(value));
}
#endif
void ComplexMessage::set_str_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.ComplexMessage.str_list)
}
void ComplexMessage::set_str_list(int index, const char* value, size_t size) {
  str_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.ComplexMessage.str_list)
}
::std::string* ComplexMessage::add_str_list() {
  // @@protoc_insertion_point(field_add_mutable:test.ComplexMessage.str_list)
  return str_list_.Add();
}
void ComplexMessage::add_str_list(const ::std::string& value) {
  str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.ComplexMessage.str_list)
}
#if LANG_CXX11
void ComplexMessage::add_str_list(::std::string&& value) {
  str_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.ComplexMessage.str_list)
}
#endif
void ComplexMessage::add_str_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.ComplexMessage.str_list)
}
void ComplexMessage::add_str_list(const char* value, size_t size) {
  str_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.ComplexMessage.str_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComplexMessage::str_list() const {
  // @@protoc_insertion_point(field_list:test.ComplexMessage.str_list)
  return str_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ComplexMessage::mutable_str_list() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexMessage.str_list)
  return &str_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::test::ComplexMessage,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  e_bool(kEBoolFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)
